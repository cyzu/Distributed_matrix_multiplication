J'utilise une structure matricielle linéarisée.
    struct Matrice{
    	int ligne, colonne;
    	long long int *matrice;
    };

Fonctionnalités implémentées :
  - Calcul du produit matriciel avec N multiple de P
  - Gestion des matrices très grandes
  - Gestion du déséquilibre dans le calcul, i.e N non multiple de P


La circulation des lignes entre les processeurs se fait ainsi :  
A chaque tour, les processeurs calculent le produit matriciel de des lignes et colonnes reçus, en stockant le résultat dans une matrice.
Le processeurs root envoie sa matrice au suivant, puis attend de recevoir depuis son précédent.
Tous les autres processeurs reçoivent du précédent puis envoient au suivant.
On répète cette démarche jusqu'à la circulation de toutes les lignes vers tous les processeurs actifs (qui calculent).

A la fin de tous les tours, chaque processeurs possèdent une ou plusieurs colonnes de la matrice final. 
Tous les processeurs envoient leur colonne(s) calculé(s) au processeur 0 qui va tous les mettre dans la matrice finale.


Les fonctions parallélisées sont : 
   - void echange_ligne_colonne(const struct Matrice * m, struct Matrice * destination)
   - void copie_matrice(const struct Matrice * m, struct Matrice * destination)
   - void scatterv(int * lignes, int * dataCount, int * adresseData, const int size, const int nb_procs)
Cette fonction calcule la répartition des lignes par rapport à la taille de la matrice et au nombre de processus. Elle calcule aussi le nombre de valeur que contiendra chaque processeur.